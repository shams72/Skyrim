stages:
    - build
    - test
    - analyze
    - deploy

include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml # gemnasium dep scanner

# Cache node modules to speed up the build, test and lint stages
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

# Build Stage
build:
  stage: build
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:27.5.1
  services:
    - name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:27.5.1
      alias: docker
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
  script:
    - docker-compose -f docker-compose.yml build --build-arg GITLAB_PROXY=${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}
    - docker-compose -f docker-compose.yml push
    - echo "Build and push completed successfully"

# Test Stage
test:
  stage: test
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:27.5.1
  allow_failure: true  # allow the pipeline to continue even if tests fail (remove later!!!)
  services:
    - name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:27.5.1-dind
      alias: docker
  before_script:
    - export GITLAB_PROXY=${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker login -u $CI_DEPENDENCY_PROXY_USER -p $CI_DEPENDENCY_PROXY_PASSWORD $CI_DEPENDENCY_PROXY_SERVER
  script:
    - docker-compose up -d
    - docker exec backend npm test -- --coverage
    #- docker exec frontend npm test -- --coverage
    - docker exec navigation-service npm test
    - echo "Tests completed successfully"
  coverage: '/All files\s*\|\s*([\d\.]+)/' # extract coverage percentage from the test results
  artifacts:
    paths:
      #- /src/frontend/coverage/
      - /src/backend/coverage/
      - /src/navigation-service/coverage/
  timeout: 5m # kill the job after 5 minutes (should never take longer than this)

# Analyze Stage
lint:
  stage: analyze
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/node:22
  script:
    - npm install eslint eslint-plugin-prettier eslint-config-prettier
    - npx eslint .
    - echo "Linting passed (placeholder)"

dependency_scanning:
  stage: analyze


# Deployment Stage 
# Staging
deploy-staging:
  stage: deploy
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/debian
  script: 
    # Install SSH client
    - echo "Installing SSH client..."
    - apt-get update && apt-get install -y openssh-client

    # Decode the SSH key and set it up
    - echo "Setting up SSH..."
    - mkdir -p /root/.ssh
    - echo "${DEPLOY_SSH_KEY}" | base64 -d > /root/.ssh/deploy_key
    - chmod 600 /root/.ssh/deploy_key

    # Deploy commands
    - echo "Connecting to the server and running deployment commands..."
    - ssh -o StrictHostKeyChecking=no -i /root/.ssh/deploy_key $DEPLOYMENT_USER@$DEPLOYMENT_SERVER "
        docker system prune -af --volumes &&
        docker-compose --env-file .env.staging -p staging down &&
        docker-compose --env-file .env.staging -p staging pull &&
        docker-compose --env-file .env.staging -p staging up -d &&
        docker exec backend-staging npx migrate-mongo up
      "

    - echo "Deployment completed successfully."
# Production
deploy-production:
  stage: deploy
  image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/debian
  when: manual # requires manual start
  script:
    # install ssh
    - echo "Installing SSH client..."
    - apt-get update && apt-get install -y openssh-client

    # decode the ssh key and set it up for use
    - echo "Setting up SSH..."
    - mkdir -p /root/.ssh
    - echo "${DEPLOY_SSH_KEY}" | base64 -d > /root/.ssh/deploy_key
    - chmod 600 /root/.ssh/deploy_key

    # ssh into the server and run deployment commands (production)
    - echo "Connecting to the server and running deployment commands..."
    - ssh -o StrictHostKeyChecking=no -i /root/.ssh/deploy_key $DEPLOYMENT_USER@$DEPLOYMENT_SERVER "
        docker system prune -af --volumes &&
        docker-compose --env-file .env.production -p production down &&
        docker-compose --env-file .env.production -p production pull &&
        docker-compose --env-file .env.production -p production up -d
      "
    - echo "Production deployment completed successfully."
